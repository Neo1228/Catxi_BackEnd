---
- name: Deploy Catxi Backend Application
  hosts: tag_Role__app
  become: yes
  serial: 1
  max_fail_percentage: 0
  vars:
    app_port: 8080
    health_check_timeout: 300

  pre_tasks:
    - name: Debug received variables from AWX
      debug:
        msg:
          - "=== AWX Variables Debug ==="
          - "docker_image: '{{ docker_image | default('UNDEFINED') }}'"
          - "docker_registry_username: '{{ docker_registry_username | default('UNDEFINED') }}'"
          - "docker_registry_password: '{{ 'SET' if docker_registry_password is defined and docker_registry_password != '' else 'UNDEFINED' }}'"
          - "build_number: '{{ build_number | default('UNDEFINED') }}'"
          - "git_branch: '{{ git_branch | default('UNDEFINED') }}'"

    - name: Set deployment variables with fallbacks
      set_fact:
        final_docker_image: "{{ docker_image | default('xms1228/catxi-backend:latest') }}"
        final_docker_registry_username: "{{ docker_registry_username | default('') }}"
        final_docker_registry_password: "{{ docker_registry_password | default('') }}"
        final_docker_registry_url: "{{ docker_registry_url | default('https://index.docker.io/v1/') }}"
        final_build_number: "{{ build_number | default('unknown') }}"
        final_git_branch: "{{ git_branch | default('unknown') }}"

    - name: Display final deployment information
      debug:
        msg:
          - "=== Final Deployment Variables ==="
          - "Deploying to: {{ inventory_hostname }}"
          - "Docker Image: {{ final_docker_image }}"
          - "Registry Username: {{ final_docker_registry_username }}"
          - "Registry Password: {{ 'SET' if final_docker_registry_password != '' else 'NOT_SET' }}"
          - "Build Number: {{ final_build_number }}"
          - "Git Branch: {{ final_git_branch }}"

    - name: Fail if critical variables are missing
      fail:
        msg: "Docker image is not properly set: {{ final_docker_image }}"
      when: final_docker_image == "UNDEFINED" or final_docker_image == ""

  tasks:
    - name: Create application directory
      file:
        path: /opt/catxi
        state: directory
        mode: '0755'

    - name: Copy existing docker-compose.yml
      copy:
        src: ../docker-compose.yml
        dest: /opt/catxi/docker-compose.yml
        mode: '0644'

    - name: Create environment file with variables
      template:
        src: templates/env.j2
        dest: /opt/catxi/.env
        mode: '0600'

    - name: Stop existing containers
      community.docker.docker_compose_v2:
        project_src: /opt/catxi
        state: absent
      ignore_errors: yes

    - name: Login to Docker Registry (if credentials provided)
      docker_login:
        username: "{{ final_docker_registry_username }}"
        password: "{{ final_docker_registry_password }}"
        registry_url: "{{ final_docker_registry_url }}"
      when:
        - final_docker_registry_username != ""
        - final_docker_registry_password != ""

    - name: Pull Docker image
      docker_image:
        name: "{{ final_docker_image }}"
        source: pull
        force_source: yes
      register: pull_result
      retries: 3
      delay: 10

    - name: Deploy with Docker Compose
      community.docker.docker_compose_v2:
        project_src: /opt/catxi
        state: present
        recreate: always

    - name: Wait for container to start
      pause:
        seconds: 30

    - name: Wait for application to be ready
      block:
        - name: Check application health endpoint
          uri:
            url: "http://{{ ansible_host | default(ansible_default_ipv4.address) }}:{{ app_port }}/actuator/health"
            method: GET
            status_code: 200
            timeout: 10
          register: health_check
          until: health_check.status == 200
          retries: "{{ (health_check_timeout | int) // 10 }}"
          delay: 10
          delegate_to: localhost
      rescue:
        - name: Fallback - Check if port is open
          wait_for:
            host: "{{ ansible_host | default(ansible_default_ipv4.address) }}"
            port: "{{ app_port }}"
            timeout: "{{ health_check_timeout }}"
            state: started
          delegate_to: localhost

    - name: Verify deployment success
      debug:
        msg: "âœ… Deployment successful on {{ inventory_hostname }} with image {{ final_docker_image }}"

    - name: Clean up old Docker images
      shell: docker image prune -af
      ignore_errors: yes

  post_tasks:
    - name: Pause between server deployments
      pause:
        seconds: 30
      when: inventory_hostname != ansible_play_hosts[-1]