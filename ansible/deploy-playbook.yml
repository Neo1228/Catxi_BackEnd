---
- name: Deploy Catxi Backend Application
  hosts: tag_Role__app
  become: yes
  serial: 1
  max_fail_percentage: 0
  vars:
    docker_image: "{{ docker_image | default(ansible_env.DOCKER_IMAGE) | default('catxi-backend:latest') }}"
    app_port: 8080
    health_check_timeout: 300

  pre_tasks:
    - name: Display target server info
      debug:
        msg: "Deploying to {{ inventory_hostname }} ({{ ansible_host | default(ansible_default_ipv4.address) }})"

  tasks:
    - name: Create application directory
      file:
        path: /opt/catxi
        state: directory
        mode: '0755'

    - name: Copy docker-compose.yml
      copy:
        src: ../docker-compose.yml
        dest: /opt/catxi/docker-compose.yml
        mode: '0644'

    - name: Copy environment file
      template:
        src: templates/env.j2
        dest: /opt/catxi/.env
        mode: '0600'

    - name: Set DOCKER_IMAGE environment variable in .env
      lineinfile:
        path: /opt/catxi/.env
        line: "DOCKER_IMAGE={{ docker_image }}"
        create: yes

    - name: Stop existing containers
      community.docker.docker_compose_v2:
        project_src: /opt/catxi
        state: absent
      ignore_errors: yes

    - name: Login to Docker Registry
      docker_login:
        username: "{{ ansible_env.DOCKER_REGISTRY_USERNAME | default(docker_registry_username) }}"
        password: "{{ ansible_env.DOCKER_REGISTRY_PASSWORD | default(docker_registry_password) }}"
        registry_url: "{{ ansible_env.DOCKER_REGISTRY_URL | default(docker_registry_url) | default('https://index.docker.io/v1/') }}"
      when: (ansible_env.DOCKER_REGISTRY_USERNAME is defined) or (docker_registry_username is defined)

    - name: Pull latest Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: yes

    - name: Deploy with Docker Compose
      community.docker.docker_compose_v2:
        project_src: /opt/catxi
        state: present
        pull: yes
        recreate: always

    - name: Wait for application to be ready
      uri:
        url: "http://{{ ansible_host | default(ansible_default_ipv4.address) }}:{{ app_port }}/actuator/health"
        method: GET
        status_code: 200
        timeout: 10
      register: health_check
      until: health_check.status == 200
      retries: "{{ (health_check_timeout | int) // 10 }}"
      delay: 10
      delegate_to: localhost

    - name: Verify deployment success
      debug:
        msg: "Deployment successful on {{ inventory_hostname }} ({{ ansible_host | default(ansible_default_ipv4.address) }})"

    - name: Clean up old Docker images
      shell: docker image prune -af
      ignore_errors: yes

  post_tasks:
    - name: Pause between server deployments
      pause:
        seconds: 30
      when: inventory_hostname != ansible_play_hosts[-1]