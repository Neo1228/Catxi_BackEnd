---
- name: Deploy Catxi Monitoring Stack to GCP Management Server
  hosts: gcp_role_monitoring
  become: yes
  vars:
    monitoring_dir: "/opt/catxi-monitoring"

  pre_tasks:
    - name: Debug received variables from AWX
      debug:
        msg:
          - "=== AWX Monitoring Variables Debug ==="
          - "EC2_INSTANCE_1: '{{ EC2_INSTANCE_1 | default('UNDEFINED') }}'"
          - "EC2_INSTANCE_2: '{{ EC2_INSTANCE_2 | default('UNDEFINED') }}'"
          - "GRAFANA_ADMIN_PASSWORD: '{{ GRAFANA_ADMIN_PASSWORD | default('UNDEFINED') }}'"
          - "DISCORD_WEBHOOK_URL: '{{ DISCORD_WEBHOOK_URL | default('UNDEFINED') }}'"

  tasks:
    - name: Create monitoring directory
      file:
        path: "{{ monitoring_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create subdirectories for monitoring components
      file:
        path: "{{ monitoring_dir }}/{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - prometheus/data
        - grafana/data
        - grafana/provisioning/datasources
        - grafana/provisioning/dashboards
        - grafana/dashboards
        - alertmanager

    - name: Note about Docker volumes
      debug:
        msg: "Using Docker named volumes for data persistence - no manual permission setting needed"

    - name: Copy docker-compose.yml
      copy:
        src: ../monitoring/docker-compose.yml
        dest: "{{ monitoring_dir }}/docker-compose.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Create Prometheus configuration with dynamic targets
      template:
        src: prometheus.yml.j2
        dest: "{{ monitoring_dir }}/prometheus/prometheus.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Copy Grafana datasources provisioning
      copy:
        src: ../monitoring/grafana/provisioning/datasources/
        dest: "{{ monitoring_dir }}/grafana/provisioning/datasources/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Copy Grafana dashboards provisioning
      copy:
        src: ../monitoring/grafana/provisioning/dashboards/
        dest: "{{ monitoring_dir }}/grafana/provisioning/dashboards/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Copy Grafana dashboards
      copy:
        src: ../monitoring/grafana/dashboards/
        dest: "{{ monitoring_dir }}/grafana/dashboards/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Create AlertManager configuration from template
      template:
        src: alertmanager.yml.j2
        dest: "{{ monitoring_dir }}/alertmanager/alertmanager.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Create environment file from variables
      template:
        src: monitoring.env.j2
        dest: "{{ monitoring_dir }}/.env"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Stop existing monitoring containers
      community.docker.docker_compose_v2:
        project_src: "{{ monitoring_dir }}"
        state: absent
      ignore_errors: yes

    - name: Pull latest Docker images
      community.docker.docker_compose_v2:
        project_src: "{{ monitoring_dir }}"
        pull: always

    - name: Deploy monitoring stack
      community.docker.docker_compose_v2:
        project_src: "{{ monitoring_dir }}"
        state: present
        recreate: always

    - name: Wait for Grafana to be ready
      wait_for:
        port: 3000
        host: "localhost"
        timeout: 120
        delay: 10

    - name: Wait for Prometheus to be ready
      wait_for:
        port: 9090
        host: "localhost"
        timeout: 120
        delay: 10

    - name: Wait for AlertManager to be ready
      wait_for:
        port: 9093
        host: "localhost"
        timeout: 60
        delay: 5

    - name: Check container health
      community.docker.docker_compose_v2:
        project_src: "{{ monitoring_dir }}"
        state: present
      register: container_status

    - name: Display container status
      debug:
        var: container_status.stdout_lines

    - name: Verify Prometheus targets
      uri:
        url: "http://localhost:9090/api/v1/targets"
        method: GET
        return_content: yes
      register: prometheus_targets
      failed_when: false
      retries: 3
      delay: 10

    - name: Display Prometheus targets status
      debug:
        msg: "Prometheus has {{ (prometheus_targets.json.data.activeTargets | length) if prometheus_targets.json is defined else 'unknown' }} active targets"

    - name: Display access information
      debug:
        msg:
          - "üéâ Catxi Monitoring Stack deployed successfully!"
          - "üìä Grafana: http://{{ ansible_host }}:3000 (localhost only)"
          - "üìà Prometheus: http://{{ ansible_host }}:9090 (localhost only)"
          - "üîî AlertManager: http://{{ ansible_host }}:9093 (localhost only)"
          - "üìä Pushgateway: http://{{ ansible_host }}:9091 (localhost only)"
          - "üë§ Grafana Login: admin / {{ GRAFANA_ADMIN_PASSWORD | default('catxi2024!') }}"
          - "üîç Monitoring targets:"
          - "  - Load Balancer: https://catxi.kro.kr/actuator/prometheus"
          - "  - EC2 Instance 1: {{ EC2_INSTANCE_1 | default('undefined') }}:8080"
          - "  - EC2 Instance 2: {{ EC2_INSTANCE_2 | default('undefined') }}:8080"
          - "  - Redis: {{ REDIS_HOST | default('host.docker.internal') }}:{{ REDIS_PORT | default('6379') }}"
          - "‚ö†Ô∏è  Services are bound to localhost for security"

  post_tasks:
    - name: Create monitoring health check script
      copy:
        content: |
          #!/bin/bash
          echo "=== Catxi Monitoring Stack Health Check ==="
          echo "Timestamp: $(date)"
          echo ""
          
          echo "üìä Container Status:"
          cd {{ monitoring_dir }} && docker compose ps
          echo ""
          
          echo "üîç Service Health:"
          for service in grafana:3000 prometheus:9090 pushgateway:9091 alertmanager:9093; do
            name=$(echo $service | cut -d: -f1)
            port=$(echo $service | cut -d: -f2)
            if curl -s -f http://localhost:$port >/dev/null 2>&1; then
              echo "‚úÖ $name is running on port $port"
            else
              echo "‚ùå $name is not responding on port $port"
            fi
          done
          
          echo ""
          echo "üìà Prometheus Targets:"
          curl -s http://localhost:9090/api/v1/targets 2>/dev/null | jq -r '.data.activeTargets[]? | "\(.labels.job): \(.health)"' 2>/dev/null || echo "Unable to fetch target status"
          
          echo ""
          echo "üìä Prometheus Configuration Reload:"
          curl -s -X POST http://localhost:9090/-/reload && echo "‚úÖ Configuration reloaded successfully" || echo "‚ùå Failed to reload configuration"
        dest: "{{ monitoring_dir }}/health-check.sh"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Run initial health check
      command: "{{ monitoring_dir }}/health-check.sh"
      register: health_check

    - name: Display health check results
      debug:
        var: health_check.stdout_lines
